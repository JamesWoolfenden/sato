resource "aws_codebuild_project" "{{.item}}" {
{{- if .resource.Artifacts}}
  artifacts {
{{- if .resource.Artifacts.Type}}
    type    = "{{.resource.Artifacts.Type}}"
{{- end}}
{{- if .resource.Artifacts.ArtifactIdentifier}}
    artifact_identifier="{{.resource.Artifacts.ArtifactIdentifier}}"
{{- end}}
    encryption_disabled= {{ Boolean .resource.Artifacts.EncryptionDisabled}}
{{- if .resource.Artifacts.Location}}
    location = "{{.resource.Artifacts.Location}}"
{{- end}}
{{- if .resource.Artifacts.Name}}
    name = "{{.resource.Artifacts.Name}}"
{{- end}}
{{- if .resource.Artifacts.NamespaceType}}
    namespace_type="{{.resource.Artifacts.NamespaceType}}"
{{- end}}
    override_artifact_name = {{Boolean .resource.Artifacts.OverrideArtifactName }}
{{- if .resource.Artifacts.Packaging}}
    packaging="{{.resource.Artifacts.Packaging}}"
{{- end}}
{{- if .resource.Artifacts.Path}}
    path="{{.resource.Artifacts.Path}}"
{{- end}}
  }
{{- end}}
  badge_enabled={{Boolean .resource.BadgeEnabled}}
{{- if .resource.BuildBatchConfig}}
  batch_build_config {
    combine_artifacts= "{{.resource.BuildBatchConfig.CombineArtifacts}}"
    restrictions {
      compute_types_allowed="{{.resource.BuildBatchConfig.ComputeTypesAllowed}}"
      maximum_builds_allowed="{{.resource.BuildBatchConfig.MaximumBuildAllowed}}"
    }
    service_role= "{{.resource.BuildBatchConfig.ServiceRole}}"
    timeout_in_mins= "{{.resource.BuildBatchConfig.TimeoutInMins}}"
  }
{{- end}}
{{- if .resource.Cache}}
  cache {
    location="{{.resource.Cache.Location}}"
    modes={{.resource.Cache.Modes}}
    type="{{.resource.Cache.Type}}"
  }
{{- end}}
{{- if .resource.ConcurrentBuildLimit}}
  concurrent_build_limit={{ .resource.ConcurrentBuildLimit}}
{{- end}}
{{- if .resource.Description}}
  description="{{.resource.Description}}"
{{- end}}
{{- if  .resource.EncryptionKey}}
  encryption_key="{{.resource.EncryptionKey}}"
{{- end}}
{{- if .resource.Environment}}
  environment {
{{- if  .resource.Environment.Certificate}}
    certificate   = "{{ .resource.Environment.Certificate}}"
{{- end}}
    compute_type = "{{ .resource.Environment.ComputeType}}"
{{- range $j, $c := .resource.Environment.EnvironmentVariables}}
    environment_variable {
      name  = "{{$c.Name}}"
{{- if $c.Type}}
      type  = "{{$c.Type}}"
{{- end}}
      value = "{{$c.Value}}"
    }
{{- end}}
    image ="{{.resource.Environment.Image}}"
{{- if .resource.Environment.ImagePullCredentialsType}}
    image_pull_credentials_type ="{{.resource.Environment.ImagePullCredentialsType}}"
{{- end}}
    privileged_mode={{Boolean .resource.Environment.PrivilegedMode}}
{{- if .resource.Environment.RegistryCredential}}
    registry_credential {
      credential="{{.resource.Environment.RegistryCredential.Credential}}"
      credential_provider="{{.resource.Environment.RegistryCredential.CredentialProvider}}"
    }
{{- end}}
    type="{{.resource.Environment.Type}}"
  }
{{- end}}
{{- if .resource.FileSystemLocations}}
  file_system_locations   {
    identifier="{{.resource.FileSystemLocations.Identifier}}"
    location="{{.resource.FileSystemLocations.Location}}"
    mount_options="{{.resource.FileSystemLocations.MountOptions}}"
    mount_point="{{.resource.FileSystemLocations.MountPoint}}"
    type="{{.resource.FileSystemLocations.Type}}"
  }
{{- end}}
{{- if .resource.LogsConfig}}
  logs_config {
{{- if  .resource.LogsConfig.CloudwatchLogs}}
    cloudwatch_logs {
      group_name  = "{{ .resource.LogsConfig.CloudwatchLogs.GroupName}}"
      status      = "{{ .resource.LogsConfig.CloudwatchLogs.Status}}"
      stream_name = "{{ .resource.LogsConfig.CloudwatchLogs.StreamName}}"
    }
{{- end}}
{{- if  .resource.LogsConfig.S3Logs}}
    s3_logs {
      encryption_disabled = {{.resource.LogsConfig.S3Logs.EncryptionDisabled}}
      location = "{{.resource.LogsConfig.S3Logs.Location}}"
      status = "{{.resource.LogsConfig.S3Logs.Status}}"
      bucket_owner_access  = "{{.resource.LogsConfig.S3Logs.BucketOwnerAccess}}"
    }
{{- end}}
  }
{{- end}}
{{- if .resource.Name}}
  name = "{{.resource.Name}}"
{{- else}}
  name = "{{.item}}"
{{- end}}
{{- if .resource.QueuedTimeoutInMinutes}}
  queued_timeout          = "{{.resource.QueuedTimeoutInMinutes}}"
{{- end}}
{{- if .resource.ResourceAccessRole}}
  resource_access_role    = "{{.resource.ResourceAccessRole}}"
{{- end}}
{{- if .resource.SecondaryArtifacts}}
  secondary_artifacts    {
       type    = "{{.resource.SecondaryArtifacts.Type}}"
   {{- if .resource.Artifacts.SecondaryArtifactIdentifier}}
       artifact_identifier="{{.resource.SecondaryArtifacts.ArtifactIdentifier}}"
   {{- end}}
       encryption_disabled= {{ Boolean .resource.SecondaryArtifacts.EncryptionDisabled}}
   {{- if .resource.SecondaryArtifacts.Location}}
       location = "{{.resource.SecondaryArtifacts.Location}}"
   {{- end}}
   {{- if .resource.SecondaryArtifacts.Name}}
       name     = "{{.resource.SecondaryArtifacts.Name}}"
   {{- end}}
   {{- if .resource.SecondaryArtifacts.NamespaceType}}
       namespace_type="{{.resource.SecondaryArtifacts.NamespaceType}}"
   {{- end}}
       override_artifact_name = {{Boolean .resource.SecondaryArtifacts.OverrideArtifactName }}
   {{- if .resource.SecondaryArtifacts.Packaging}}
       packaging="{{.resource.SecondaryArtifacts.Packaging}}"
   {{- end}}
   {{- if .resource.SecondaryArtifacts.Path}}
       path="{{.resource.SecondaryArtifacts.Path}}"
   {{- end}}
  }
{{- end}}
{{- if .resource.SecondarySourceVersions }}
  secondary_source_version {
    source_indentifier="{{.resource.SecondarySourceVersions.SourceIdentifier }}"
    source_version="{{.resource.SecondarySourceVersions.SourceVersion }}"
  }
{{- end}}
{{- if .resource.SecondarySources}}
  secondary_sources{
{{- if .resource.SecondarySources.BuildSpec}}
      buildspec="{{.resource.SecondarySources.BuildSpec}}"
{{- else}}
      buildspec=""
{{- end}}
{{- if .resource.SecondarySources.GitCloneDepth}}
      git_clone_depth={{.resource.SecondarySources.GitCloneDepth}}
{{- end}}
  {{- if  .resource.SecondarySources.GitSubmodulesConfig}}
      git_submodules_config {
        fetch_submodules="{{.resource.SecondarySources.GitSubmodulesConfig.FetchSubmodules}}"
  {{- end}}
      insecure_ssl={{Boolean .resource.SecondarySources.InsecureSsl}}
      location="{{.resource.SecondarySources.Location}}"
      report_build_status={{Boolean .resource.SecondarySources.ReportBuildStatus}}
      type="{{.resource.SecondarySources.Type}}"
  }
{{- end}}
  service_role="{{.resource.ServiceRole}}"
{{- if .resource.Source}}
  source {
{{- if .resource.Source.BuildSpec}}
    buildspec="{{.resource.Source.BuildSpec}}"
{{- end}}
{{- if .resource.Source.GitCloneDepth}}
    git_clone_depth={{.resource.Source.GitCloneDepth}}
{{- end}}
{{- if  .resource.Source.GitSubmodulesConfig}}
    git_submodules_config {
      fetch_submodules="{{.resource.Source.GitSubmodulesConfig.FetchSubmodules}}"
{{- end}}
    insecure_ssl={{Boolean .resource.Source.InsecureSsl}}
{{- if .resource.Source.Location}}
    location="{{.resource.Source.Location}}"
{{- end}}
    report_build_status={{Boolean .resource.Source.ReportBuildStatus}}
    type="{{.resource.Source.Type}}"
  }
{{- end}}
{{- if .source.SourceVersion}}
  source_version={{.source.SourceVersion}}
{{- end}}
{{- if .resource.Tags}}
  tags = {
    {{Tags .resource.Tags}}
  }
{{- end}}
{{- if .resource.TimeoutInMinutes}}
  build_timeout={{.resource.TimeoutInMinutes}}
{{- end}}
{{- if .resource.Visibility}}
  project_visibility="{{.resource.Visibility}}"
{{- end}}
{{- if .resource.VpcConfig}}
  vpc_config {
    security_group_ids={{.resource.VpcConfig.SecurityGroupIds}}
    subnets={{.resource.VpcConfig.Subnets}}
    vpc_id="{{.resource.VpcConfig.VpcId}}"
  }
{{- end}}
}
