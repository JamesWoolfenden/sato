resource "aws_ecs_task_definition" "{{.item}}" {
{{- if .resource.ContainerDefinitions}}
  container_definitions = jsonencode([
  {{- range $a, $i := .resource.ContainerDefinitions}}
{
    {{- if $i.Command}}
  command = {{$i.Command}}
    {{- end}}
    {{- if $i.Cpu}}
cpu       = {{$i.Cpu}}
    {{- end}}
    {{- if $i.DependsOnProp}}
  dependsOn={{$i.DependsOnProp}}
    {{- end}}
  disableNetworking= {{Boolean $i.DisableNetworking }}
  dnsSearchDomains = {{Array $i.DnsSearchDomains}}
  dnsServers       = {{Array $i.DnsServers}}
    {{- if  $i.DockerLabels}}
  dockerLabels     = {{Demap $i.DockerLabels}}
    {{- end}}
  dockerSecurityOptions={{$i.DockerSecurityOptions}}
  entryPoint={{Array $i.EntryPoint }}
    {{- if .Environment }}
  environment      = {{$i.Environment }}
    {{- end}}
    {{- if $i.EnvironmentFiles }}
  environmentFiles= {{$i.EnvironmentFiles }}
    {{- end}}
  essential={{Boolean $i.Essential }}
    {{- if $i.ExtraHosts }}
  extraHosts={{$i.ExtraHosts }}
    {{- end}}
    {{- if  $i.FirelensConfiguration}}
  firelensConfiguration={{$i.FirelensConfiguration}}
    {{- end}}
    {{- if $i.HealthCheck}}
  healthCheck={{$i.HealthCheck}}
    {{- end}}
  hostname={{Nil $i.Hostname|Quote }}
  image={{Nil $i.Image|Quote}}
  interactive={{Boolean $i.Interactive}}
  links={{Array $i.Links}}
    {{- if $i.LinuxParameters}}
  linuxParameters={{$i.LinuxParameters}}
    {{- end}}
    {{- if $i.LogConfiguration}}
  logConfiguration={
    LogDriver = {{Nil $i.LogConfiguration.LogDriver|Quote}}
    {{- if $i.LogConfiguration.Options}}
    Options={
      {{- range $g, $z:= $i.LogConfiguration.Options}}
      {{$g}}="{{$z}}"
      {{- end}}
    }
    {{- end}}
    secretOptions ={{$i.LogConfiguration.SecretOptions}}
  }
  {{- end}}
  {{- if $i.Memory}}
  memory          = {{$i.Memory}}
  {{- end}}
  {{- if $i.MemoryReservation }}
  memoryReservation={{$i.MemoryReservation }}
  {{- end}}

  {{- if  $i.MountPoints }}
  mountPoints=[
  {{- range $b, $k:=  $i.MountPoints }}
  {
    container_path= {{Nil $k.ContainerPath|Quote }}
    read_only     = {{Boolean $k.ReadOnly}}
    source_volume = {{Nil $k.SourceVolume|Quote}}
  },
  {{- end}}
]
{{- end}}
  name="{{$i.Name}}"
{{- if $i.PortMappings}}
  portMappings = [{{- range $c, $l:= $i.PortMappings}}
  {
    ContainerPort = {{$l.ContainerPort}}
{{- if  $l.HostPort}}
    HostPort = {{$l.HostPort}}
{{- end}}
    Protocol = {{Nil $l.Protocol|Quote}}
  },
{{- end}}
  ]
{{- end}}
  privileged    = {{Boolean $i.Privileged}}
  pseudoTerminal= {{Boolean $i.PseudoTerminal}}
  readonlyRootFilesystem={{Boolean $i.ReadonlyRootFilesystem}}
{{- if  $i.RepositoryCredentials}}
  repositoryCredentials={{ $i.RepositoryCredentials}}
{{- end}}
{{- if $i.ResourceRequirements}}
  resourceRequirements={{$i.ResourceRequirements}}
{{- end}}
{{- if $i.Secrets}}
  secrets={{$i.Secrets}}
{{- end}}
{{- if $i.StartTimeout}}
  startTimeout={{$i.StartTimeout}}
{{- end}}
{{- if $i.StopTimeout}}
  stopTimeout={{$i.StopTimeout}}
{{- end}}
{{- if $i.SystemControls}}
  systemControls={{$i.SystemControls}}
{{- end}}
{{- if $i.Ulimits}}
  ulimits={{$i.Ulimits}}
{{- end}}
  user={{Nil $i.User|Quote}}
{{- if $i.VolumesFrom}}
  VolumesFrom=[
{{- range $b, $j:= $i.VolumesFrom}}
    {
      SourceContainer = "{{$j.SourceContainer}}"
      ReadOnly = {{Boolean $j.ReadOnly}}
    },
{{- end}}
  ]
{{- end}}
  workingDirectory={{Nil $i.WorkingDirectory|Quote}}
},{{- end}}])
{{- end}}

  cpu               = {{Nil .resource.Cpu|Quote}}
{{- if   .resource.EphemeralStorage}}
  ephemeral_storage = {{ .resource.EphemeralStorage}}
{{- end}}
  execution_role_arn= {{Nil .resource.ExecutionRoleArn|Quote}}
  family            = {{Nil .resource.Family|Quote}}
{{- if   .resource.InferenceAccelerators}}
{{- range $a, $i:= .resource.InferenceAccelerators}}
  inference_accelerator {
    device_name     = "{{$i.DeviceName}}"
    device_type     = "{{$i.DeviceType}}"
  }
{{- end}}
{{- end}}
{{- if   .resource.IpcMode}}
  ipc_mode          = {{.resource.IpcMode}}
{{- end}}
{{- if   .resource.Memory}}
  memory            = {{.resource.Memory}}
{{- end}}
{{- if .resource.NetworkMode}}
  network_mode      = {{Nil .resource.NetworkMode|Quote}}
{{- end}}
{{- if .resource.PidMode }}
  pid_mode          = {{.resource.PidMode }}
{{- end}}
{{- if .resource.PlacementConstraints}}
{{ range $a, $i:= .resource.PlacementConstraints}}
  placement_constraints{
    type      = "{{$i.type}}"
    expression= "{{$i.expression}}"
  }
{{- end}}
{{- end}}
{{- if .resource.ProxyConfiguration}}
  proxy_configuration={{.resource.ProxyConfiguration}}
{{- end}}
  requires_compatibilities={{.resource.RequiresCompatibilities}}
{{- if .resource.RuntimePlatform}}
  runtime_platform{}
{{- end}}
{{- if .resource.Tags}}
  tags = {
  {{Tags .resource.Tags}}
    }
{{- end}}
{{- if .resource.TaskRoleArn}}
  task_role_arn={{.resource.TaskRoleArn}}
{{- end}}
{{- if .resource.Volumes}}
{{- range $a, $i:= .resource.Volumes}}
  volume {
{{- if $i.DockerVolumeConfiguration }}
    docker_volume_configuration= {{$i.DockerVolumeConfiguration }}
{{- end}}
{{- if $i.EFSVolumeConfiguration}}
    efs_volume_configuration={{$i.EFSVolumeConfiguration}}
{{- end}}
{{- if $i.Host}}
    host_path = {{$i.Host}}
{{- end}}
    name= {{Nil $i.Name|Quote }}
  }
{{- end}}
{{- end}}
}
