resource "aws_cloudwatch_event_rule" "{{.item}}" {
{{- if .resource.Name}}
  name                = "{{.resource.Name}}"
{{ else }}
  name="{{.item}}"
{{- end}}
  description         = "{{.resource.Description}}"
{{- if  .resource.EventBusName}}
  event_bus_name      = "{{.resource.EventBusName}}"
{{- end}}
{{- if .resource.RoleArn}}
  role_arn            = "{{.resource.RoleArn}}"
{{- end}}
{{- if .resource.ScheduleExpression}}
  schedule_expression = "{{.resource.ScheduleExpression}}"
{{- end}}
  event_pattern = jsonencode({{Marshal .resource.EventPattern}})
}



{{- if .resource.Targets}}
{{- $p := .item}}
{{range $a, $i := .resource.Targets}}
resource "aws_cloudwatch_event_target" "{{$i.Id}}" {
  arn  = "{{ $i.Arn}}"
  rule = aws_cloudwatch_event_rule.{{$p}}.id
{{- if   $i.RoleArn}}
  role_arn="{{$i.RoleArn}}"
{{- end}}
{{- if $i.Input}}
  input="{{$i.Input}}"
{{- end}}
{{- if $i.InputPath}}
  input_path="{{$i.InputPath}}"
{{- end}}
{{- if $i.InputTransformer}}
  input_transformer = {{$i.InputTransformer}}
{{- end}}
{{- if   $i.SqsParameters}}
  sqs_target={{$i.SqsParameters}}
{{- end}}
{{- if   $i.BatchParameters}}
  batch_target={{$i.BatchParameters}}
{{- end}}
{{- if  $i.KinesisParameters }}
  kinesis_target={{$i.KinesisParameters }}
{{- end}}
{{- if   $i.RedshiftDataParameters}}
  redshift_target={{$i.RedshiftDataParameters}}
{{- end}}
{{- if  $i.EcsParameters}}
  ecs_target {
{{- if $i.EcsParameters.CapacityProviderStrategy}}
     capacity_provider_strategy {
       base=    {{$i.EcsParameters.CapacityProviderStrategy.Base}}
       capacity={{$i.EcsParameters.CapacityProviderStrategy.Capacity}}
       weight=  {{$i.EcsParameters.CapacityProviderStrategy.Weight}}
     }
{{- end}}
     enable_ecs_managed_tags={{Boolean $i.EcsParameters.EnableECSManagedTags}}
     enable_execute_command={{Boolean $i.EcsParameters.EnableExecuteCommand}}
{{- if $i.EcsParameters.Group}}
     group      = {{$i.EcsParameters.Group}}
{{- end}}
{{- if $i.EcsParameters.LaunchType}}
     launch_type= {{$i.EcsParameters.LaunchType}}
{{- end}}
{{- if $i.EcsParameters.NetworkConfiguration}}
     network_configuration={{$i.EcsParameters.NetworkConfiguration}}
{{- end}}
{{- if $i.EcsParameters.PlacementConstraints}}
     placement_constraint {
       type      = "{{$i.EcsParameters.PlacementConstraints}}"
       expression= "{{$i.EcsParameters.PlacementConstraints}}"
     }
{{- end}}
{{- if $i.EcsParameters.PlatformVersion}}
     platform_version={{$i.EcsParameters.PlatformVersion}}
{{- end}}
{{- if $i.EcsParameters.TagList}}
     tags={
     {{Tags $i.EcsParameters.TagList}}
     }
{{- end}}
     task_count = {{$i.EcsParameters.TaskCount}}
     task_definition_arn = "{{$i.EcsParameters.TaskDefinitionArn}}"
   }
{{- end}}
{{- if  $i.HttpParameters}}
  http_target={{$i.HttpParameters}}
{{- end}}
{{- if  $i.DeadLetterConfig}}
  dead_letter_config={{$i.DeadLetterConfig}}
{{- end}}
{{- if  $i.InputTransformer}}
  input_transformer={{$i.InputTransformer}}
{{- end}}
{{- if  $i.RetryPolicy}}
  retry_policy={{$i.RetryPolicy}}
{{- end}}
{{- if $i.RunCommandParameters}}
  run_command_targets={{$i.RunCommandParameters}}
{{- end}}
}
{{- end}}
{{- end}}
