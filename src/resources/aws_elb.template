resource "aws_elb" "{{.item}}" {
{{- if .resource.LoadBalancerName}}
  name               = "{{.resource.LoadBalancerName}}"
{{- else}}
  name= "{{.item}}"
{{- end}}
{{- if .resource.AvailabilityZones}}
  availability_zones = [{{range $i, $v := .resource.AvailabilityZones}}{{if $i}}, {{end}}"{{.}}"{{end}}]
{{- end}}
{{- if .resource.AccessLoggingPolicy}}
  access_logs {
    bucket        = "{{.resource.AccessLoggingPolicy.S3BucketName}}"
    bucket_prefix = "{{.resource.AccessLoggingPolicy.S3BucketPrefix}}"
    interval      = {{.resource.AccessLoggingPolicy.EmitInterval}}
  }
{{- end}}
{{- if .resource.HealthCheck}}
  health_check {
    healthy_threshold   = {{.resource.HealthCheck.HealthyThreshold}}
    unhealthy_threshold = {{.resource.HealthCheck.UnhealthyThreshold}}
    timeout             = {{.resource.HealthCheck.Timeout}}
    target              = "{{.resource.HealthCheck.Target}}"
    interval            = {{.resource.HealthCheck.Interval}}
  }
{{- end}}
  instances                   = {{.resource.Instances}}
  cross_zone_load_balancing   = {{Boolean .resource.CrossZone }}
  idle_timeout                = 400
{{- if .resource.Tags}}
  tags = {
  {{Tags .resource.Tags}}
    }
{{- end}}
{{- if .resource.ConnectionDrainingPolicy}}
  connection_draining="{{.resource.ConnectionDrainingPolicy}}
  connection_draining_timeout="{{.resource.ConnectionDrainingPolicy}}
{{- end}}
{{- if .resource.Listeners}}
{{- range $a, $i:= .resource.Listeners}}
  listener {
    instance_port    = {{$i.InstancePort}}
{{- if $i.InstanceProtocol}}
    instance_protocol= "{{$i.InstanceProtocol}}"
{{- else}}
    instance_protocol= ""
{{- end}}
    lb_port          = {{$i.LoadBalancerPort}}
    lb_protocol      = "{{$i.Protocol}}"
{{- if $i.SSLCertificateId}}
    ssl_certificate_id= "{{$i.SSLCertificateId}}"
{{- else}}
    ssl_certificate_id=""
{{- end}}
  }
{{- end}}
{{- end}}
{{- if .resource.SecurityGroups}}
  security_groups={{.resource.SecurityGroups}}
{{- end}}
{{- if  .resource.Subnets}}
  subnets={{.resource.Subnets}}
{{- end}}
}

{{- if .resource.AppCookieStickinessPolicy}}
resource "aws_app_cookie_stickiness_policy" "TODO" {
  name          = "foo_policy"
  load_balancer = aws_elb.lb.name
  lb_port       = 80
  cookie_name   = "MyAppCookie"
}
{{- end}}

{{- if .resource.LbCookieStickinessPolicy}}
resource "aws_lb_cookie_stickiness_policy" "TODO" {
  name          = "foo_policy"
  load_balancer = aws_elb.lb.name
  lb_port       = 80
  cookie_name   = "MyAppCookie"
}
{{- end}}

{{- if .resource.Policies}}
{{- range $a, $i := .resource.Policies}}
resource "aws_load_balancer_policy" "TODO" {
load_balancer_name = aws_elb.wu-tang.name
policy_name        = "wu-tang-ca-pubkey-policy"
policy_type_name   = "PublicKeyPolicyType"

# The public key of a CA certificate file can be extracted with:
# $ cat wu-tang-ca.pem | openssl x509 -pubkey -noout | grep -v '\-\-\-\-' | tr -d '\n' > wu-tang-pubkey
policy_attribute {
name  = "PublicKey"
value = file("wu-tang-pubkey")
}
}
{{- end}}
{{- end}}
