resource "aws_s3_bucket" "{{.item}}" {
{{- if .resource.BucketName}}
  bucket="{{.resource.BucketName}}"
{{- else}}
  bucket="{{.item}}"
{{- end}}

{{- if .resource.ObjectLockConfiguration}}
  object_lock_configuration {
    object_lock_enabled = "{{.resource.ObjectLockConfiguration}}"
  }}
{{- end}}
{{- if .resource.Tags}}
  tags = {
  {{Tags .resource.Tags}}
  }
{{- end}}
}

{{- if .resource.AccessControl}}
resource "aws_s3_bucket_acl" "{{.item}}" {
  bucket = aws_s3_bucket.{{.item}}.id
  acl    = "{{Kebab (.resource.AccessControl)}}"
}
{{- end}}

{{- if .resource.LifecycleConfiguration}}
resource "aws_s3_bucket_lifecycle_configuration" "{{.item}}" {
  bucket = aws_s3_bucket.{{.item}}.id
{{- range $i, $a := .resource.LifecycleConfiguration.Rules}}
  rule {
    id     = "{{ $a.Id}}"
    status = "{{ $a.Status}}"
{{- range $j, $b := $a.Transitions}}
    transition {
{{- if $b.TransitionInDays}}
      days = {{$b.TransitionInDays}}
{{- end}}
      storage_class = "{{$b.StorageClass}}"
{{- if $b.TransitionDate}}
      date = {{$b.TransitionDate}}
{{- end}}
    }
{{- end}}
  }
{{- end}}
}
{{- end}}

{{- if .resource.BucketEncryption }}
resource "aws_s3_bucket_server_side_encryption_configuration" "{{.item}}" {
  bucket = aws_s3_bucket.{{.item}}.bucket
{{- range $i, $a := .resource.BucketEncryption.ServerSideEncryptionConfiguration}}
  rule {
    apply_server_side_encryption_by_default {
{{- if $a.ServerSideEncryptionByDefault.KMSMasterKeyID}}
       kms_key_id= {{ $a.ServerSideEncryptionByDefault.KMSMasterKeyID}}
{{- end}}
       sse_algorithm     = "{{ $a.ServerSideEncryptionByDefault.SSEAlgorithm}}"
    }
  }
}
{{- end}}
{{- end}}


{{- if .resource.ReplicationConfiguration}}
resource "aws_s3_bucket_replication_configuration" "{{ .item }}" {
  #provider = <differentRegion>
  # Must have bucket versioning enabled first
  depends_on = [aws_s3_bucket_versioning.{{ .item }}]
{{- if .resource.ReplicationConfiguration.Role}}
  role   = "{{.resource.ReplicationConfiguration.Role}}"
{{- else}}
  role   = ""
{{- end}}
  bucket = aws_s3_bucket.{{ .item }}.id
{{- range $i, $a := .resource.ReplicationConfiguration.Rules}}
  rule {
    id = "{{$a.Id}}"
{{- if $a.DeleteMarkerReplication}}
    delete_marker_replication {
      status= "{{ $a.DeleteMarkerReplication}}"
    }
{{- end}}
{{- if $a.Filter}}
    filter {
      prefix = "{{$a.Filter}}"
    }
{{- end}}
    status = "{{$a.Status}}"
{{- if $a.SourceSelectionCriteria}}
    source_selection_criteria {
{{- if $a.SourceSelectionCriteria.ReplicaModifications}}
      replica_modifications {
        status = ""
      }
{{- end}}
{{- if  $a.SourceSelectionCriteria.SseKmsEncryptedObjects }}
      sse_kms_encrypted_objects {
        status = "{{$a.SourceSelectionCriteria.SseKmsEncryptedObjects.Status}}"
      }
{{- end}}
    }
{{- end}}

    destination {
{{- if $a.Destination.AccessControlTranslation}}
      access_control_translation="{{$a.Destination.AccessControlTranslation}}"
{{- end}}
{{- if $a.Destination.Account}}
      account       = "{{$a.Destination.Account}}"
{{- end}}
      bucket        = "{{$a.Destination.Bucket}}"
      storage_class = "{{$a.Destination.StorageClass}}"
{{- if $a.Destination.EncryptionConfiguration.ReplicaKmsKeyID}}
      encryption_configuration {
        replica_kms_key_id="{{$a.Destination.EncryptionConfiguration.ReplicaKmsKeyID}}"
      }
{{- end}}
{{- if $a.Destination.Metrics}}
      metrics="{{$a.Destination.Metrics}}"
{{- end}}
{{- if $a.Destination.ReplicationTime}}
      replication_time="{{$a.Destination.ReplicationTime}}"
{{- end}}
    }
  }
  {{- end}}
}
{{- end}}


{{- if .resource.VersioningConfiguration}}
resource "aws_s3_bucket_versioning" "{{.item}}" {
  bucket = aws_s3_bucket.{{.item}}.id
  versioning_configuration {
    status = "{{ .resource.VersioningConfiguration.Status}}"
  }
}
{{- end}}

{{- if .resource.PublicAccessBlockConfiguration}}
resource "aws_s3_bucket_public_access_block" "{{.item}}" {
  bucket = aws_s3_bucket.{{.item}}.id

  block_public_acls       = {{ Boolean .resource.PublicAccessBlockConfiguration.BlockPublicAcls}}
  block_public_policy     = {{ Boolean .resource.PublicAccessBlockConfiguration.BlockPublicPolicy}}
  ignore_public_acls      = {{ Boolean .resource.PublicAccessBlockConfiguration.IgnorePublicAcls}}
  restrict_public_buckets = {{ Boolean .resource.PublicAccessBlockConfiguration.RestrictPublicBuckets}}
}
{{- end}}
