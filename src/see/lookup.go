package see

import "fmt"

// Lookup converts from cf/arm to terraform resource name
func Lookup(resource string) (*string, error) {
	Lookup := map[string]string{
		"AWS::ApplicationAutoScaling::ScalableTarget":      "aws_appautoscaling_target",
		"AWS::ApplicationAutoScaling::ScalingPolicy":       "aws_appAutoscaling_policy",
		"AWS::AutoScaling::AutoScalingGroup":               "aws_autoscaling_group",
		"AWS::AutoScaling::LaunchConfiguration":            "aws_launch_configuration",
		"AWS::AutoScaling::LifecycleHook":                  "aws_autoscaling_lifecycle_hook",
		"AWS::AutoScaling::ScalingPolicy":                  "aws_autoscaling_policy",
		"AWS::AutoScaling::ScheduledAction":                "aws_autoscaling_schedule",
		"AWS::Backup::BackupPlan":                          "aws_backup_plan",
		"AWS::Backup::BackupSelection":                     "aws_backup_selection",
		"AWS::Backup::BackupVault":                         "aws_backup_vault",
		"AWS::Cloud9::EnvironmentEC2":                      "aws_cloud9_environment_ec2",
		"AWS::CloudFormation::Stack":                       "aws_cloudformation_stack",
		"AWS::CloudFront::CloudFrontOriginAccessIdentity":  "aws_cloudfront_origin_access_identity",
		"AWS::CloudFront::Distribution":                    "aws_cloudfront_distribution",
		"AWS::CloudWatch::Alarm":                           "aws_cloudwatch_metric_alarm",
		"AWS::CloudWatch::Dashboard":                       "aws_cloudwatch_dashboard",
		"AWS::CodeBuild::Project":                          "aws_codebuild_project",
		"AWS::CodeCommit::Repository":                      "aws_codecommit_repository",
		"AWS::CodePipeline::Pipeline":                      "aws_codepipeline",
		"AWS::Config::ConfigRule":                          "aws_config_config_rule",
		"AWS::Config::ConfigurationRecorder":               "aws_config_configuration_recorder",
		"AWS::Config::DeliveryChannel":                     "aws_config_delivery_channel",
		"AWS::DMS::Endpoint":                               "aws_dms_endpoint",
		"AWS::DMS::ReplicationInstance":                    "aws_dms_replication_instance",
		"AWS::DMS::ReplicationSubnetGroup":                 "aws_dms_replication_subnet_group",
		"AWS::DMS::ReplicationTask":                        "aws_dms_replication_task",
		"AWS::DirectoryService::MicrosoftAD":               "aws_directory_service_directory",
		"AWS::DynamoDB::Table":                             "aws_dynamodb_table",
		"AWS::EC2::DHCPOptions":                            "aws_vpc_dhcp_options",
		"AWS::EC2::EIP":                                    "aws_eip",
		"AWS::EC2::EIPAssociation":                         "aws_eip_association",
		"AWS::EC2::FlowLog":                                "aws_flow_log",
		"AWS::EC2::Instance":                               "aws_instance",
		"AWS::EC2::InternetGateway":                        "aws_Internet_gateway",
		"AWS::EC2::LaunchTemplate":                         "aws_launch_template",
		"AWS::EC2::NatGateway":                             "aws_nat_gateway",
		"AWS::EC2::NetworkAcl":                             "aws_network_acl",
		"AWS::EC2::NetworkAclEntry":                        "aws_network_acl_rule",
		"AWS::EC2::NetworkInterface":                       "aws_network_interface",
		"AWS::EC2::Route":                                  "aws_route",
		"AWS::EC2::RouteTable":                             "aws_route_table",
		"AWS::EC2::SecurityGroup":                          "aws_security_group",
		"AWS::EC2::SecurityGroupEgress":                    "aws_security_group_rule_egress",
		"AWS::EC2::SecurityGroupIngress":                   "aws_security_group_rule_ingress",
		"AWS::EC2::Subnet":                                 "aws_subnet",
		"AWS::EC2::SubnetNetworkAclAssociation":            "aws_network_acl_association",
		"AWS::EC2::SubnetRouteTableAssociation":            "aws_route_table_association",
		"AWS::EC2::VPC":                                    "aws_vpc",
		"AWS::EC2::VPCDHCPOptionsAssociation":              "aws_vpc_dhcp_options_association",
		"AWS::EC2::VPCEndpoint":                            "aws_vpc_rndpoint",
		"AWS::EC2::VPCGatewayAttachment":                   "aws_vpn_gatewayAttachment",
		"AWS::EC2::Volume":                                 "aws_ebs_volume",
		"AWS::ECS::Cluster":                                "aws_ecs_cluster",
		"AWS::ECS::Service":                                "aws_ecs_service",
		"AWS::ECS::TaskDefinition":                         "aws_ecs_task_definition",
		"AWS::EFS::FileSystem":                             "aws_efs_file_system",
		"AWS::EFS::MountTarget":                            "aws_efs_mount_target",
		"AWS::EKS::Cluster":                                "aws_eks_cluster",
		"AWS::EKS::Nodegroup":                              "aws_eks_node_group",
		"AWS::ElastiCache::ParameterGroup":                 "aws_elasticache_parameter_group",
		"AWS::ElastiCache::ReplicationGroup":               "aws_elasticache_replication_group",
		"AWS::ElastiCache::SubnetGroup":                    "aws_elasticache_subnet_group",
		"AWS::ElasticLoadBalancing::LoadBalancer":          "aws_elb",
		"AWS::ElasticLoadBalancingV2::Listener":            "aws_lb_listener",
		"AWS::ElasticLoadBalancingV2::ListenerRule":        "aws_lb_listener_rule",
		"AWS::ElasticLoadBalancingV2::LoadBalancer":        "aws_lb",
		"AWS::ElasticLoadBalancingV2::TargetGroup":         "aws_lb_target_group",
		"AWS::Events::Rule":                                "aws_cloudwatch_event_rule",
		"AWS::IAM::AccessKey":                              "aws_iam_access_key",
		"AWS::IAM::Group":                                  "aws_iam_group",
		"AWS::IAM::InstanceProfile":                        "aws_iam_instance_profile",
		"AWS::IAM::ManagedPolicy":                          "aws_iam_managed_policy",
		"AWS::IAM::Policy":                                 "aws_iam_policy",
		"AWS::IAM::Role":                                   "aws_iam_role",
		"AWS::IAM::User":                                   "aws_iam_user",
		"AWS::IAM::UserToGroupAddition":                    "aws_iam_group_membership",
		"AWS::KMS::Alias":                                  "aws_kms_alias",
		"AWS::KMS::Key":                                    "aws_Kms_key",
		"AWS::Lambda::EventSourceMapping":                  "aws_lambda_event_source_mapping",
		"AWS::Lambda::Function":                            "aws_lambda_function",
		"AWS::Lambda::Permission":                          "aws_lambda_permission",
		"AWS::Lambda::Version":                             "aws_lambda_version",
		"AWS::Logs::LogGroup":                              "aws_cloudwatch_logGroup",
		"AWS::Logs::MetricFilter":                          "aws_cloudwatch_logMetricFilter",
		"AWS::Neptune::DBCluster":                          "aws_neptune_cluster",
		"AWS::Neptune::DBClusterParameterGroup":            "aws_neptune_cluster_parameter_group",
		"AWS::Neptune::DBInstance":                         "aws_neptune_cluster_instance",
		"AWS::Neptune::DBParameterGroup":                   "aws_neptune_parameter_group",
		"AWS::Neptune::DBSubnetGroup":                      "aws_neptune_subnet_group",
		"AWS::RDS::DBCluster":                              "aws_rds_cluster",
		"AWS::RDS::DBClusterParameterGroup":                "aws_rds_cluster_parameter_group",
		"AWS::RDS::DBInstance":                             "aws_db_instance",
		"AWS::RDS::DBParameterGroup":                       "aws_db_parameter_group",
		"AWS::RDS::DBSubnetGroup":                          "aws_db_subnet_group",
		"AWS::Route53::RecordSet":                          "aws_route53_record",
		"AWS::S3::Bucket":                                  "aws_s3_bucket",
		"AWS::S3::BucketPolicy":                            "aws_s3_bucket_policy",
		"AWS::SNS::Subscription":                           "aws_sns_subscription",
		"AWS::SNS::Topic":                                  "aws_sns_topic",
		"AWS::SNS::TopicPolicy":                            "aws_sns_topic_policy",
		"AWS::SQS::Queue":                                  "aws_sqs_queue",
		"AWS::SSM::Association":                            "aws_ssm_association",
		"AWS::SSM::Document":                               "aws_ssm_document",
		"AWS::SSM::MaintenanceWindow":                      "aws_ssm_maintenance_window",
		"AWS::SSM::MaintenanceWindowTarget":                "aws_ssm_maintenance_window_target",
		"AWS::SSM::MaintenanceWindowTask":                  "aws_ssm_maintenance_window_task",
		"AWS::SecretsManager::Secret":                      "aws_secrets_manager_secret",
		"AWS::ServiceCatalog::Portfolio":                   "aws_service_catalog_portfolio",
		"AWS::ServiceCatalog::PortfolioProductAssociation": "aws_service_catalog_product_portfolio_association",
		"AWS::ServiceCatalog::PortfolioShare":              "aws_service_catalog_portfolio_share",
		"AWS::ServiceCatalog::TagOption":                   "aws_service_catalog_tag_option",
		"AWS::ServiceCatalog::TagOptionAssociation":        "aws_service_catalog_tag_option_association",
		"AWS::ServiceDiscovery::Service":                   "aws_service_discovery_service",
		"AWS::StepFunctions::StateMachine":                 "aws_sfn_state_machine",
		"AWS::WAFv2::WebACLAssociation":                    "aws_wafv2_webacl_association",
		"Microsoft.AnalysisServices/servers":               "azurerm_analysis_services_server",
		"Microsoft.ApiManagement/service":                  "azurerm_api_management",
		"Microsoft.App/containerApps":                      "azurerm_container_app",
		"Microsoft.App/managedEnvironments":                "azurerm_container_app_environment",
		"Microsoft.Authorization/roleAssignments":          "azurerm_role_assignment",
		"Microsoft.Authorization/roleDefinitions":          "azurerm_role_definition",
		"Microsoft.Compute/virtualMachines":                "azurerm_virtual_machine",
		"Microsoft.Compute/virtualMachines/extensions":     "azurerm_virtual_machine_extension",
		"Microsoft.ManagedIdentity/userAssignedIdentities": "azurerm_user_assigned_identity",
		"Microsoft.Network/networkInterfaces":              "azurerm_network_interface",
		"Microsoft.Network/networkSecurityGroups":          "azurerm_network_security_group",
		"Microsoft.Network/publicIPAddresses":              "azurerm_public_ip",
		"Microsoft.Network/virtualNetworks":                "azurerm_virtual_network",
		"Microsoft.Network/virtualNetworks/subnets":        "azurerm_subnet",
		"Microsoft.OperationalInsights/workspaces":         "azurerm_log_analytics_workspace",
		"Microsoft.Resources/deployments":                  "azurerm_template_deployment",
		"Microsoft.Storage/storageAccounts":                "azurerm_storage_account",
		"Microsoft.ContainerRegistry/registries":           "azurerm_container_registry",
	}
	result := Lookup[resource]
	var err error
	if result == "" {
		err = fmt.Errorf("resource %s not found", resource)
		return nil, err
	}
	return &result, err
}
